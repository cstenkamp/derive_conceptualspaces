#!/bin/bash
#$ -N smk_runner
#$ -l mem=200M
#$ -l h_rt=01:29:30

# You have to manually set the walltime here to the same value than what's in the cluster.yaml!

###################### Env-vars you need ######################

if [[ -z "${MA_BASE_DIR}" ]]; then
  echo "You need the env-var MA_BASE_DIR, pointing to the root of your data!";
  exit 1;
fi
if [[ -z "${MA_CODEPATH}" ]]; then
  echo "You need the env-var MA_CODEPATH, pointing to the root of the code!";
  exit 1;
fi
if [[ -z "${MA_CONDAPATH}" ]]; then
  export MA_CONDAPATH=$HOME/miniconda
fi
if [[ -z "${MA_CUSTOM_ACCTFILE}" ]]; then
  export MA_CUSTOM_ACCTFILE=$HOME/custom_acctfile.yml
fi
if [[ -z "${MA_CONFIGDIR}" ]]; then
  export MA_CONFIGDIR=$MA_CODEPATH/config
fi

echo "Joah, alles gut soweit"

exit 1

###################### stuff you don't need to care about ######################
# set runtime from the yaml in the $CODEPATH
source $CODEPATH/workflow/sge/util/parse_yml.sh
eval $(parse_yaml $HOME/derive_conceptualspaces/workflow/sge/ikw_grid/cluster.yaml | grep __default___h_rt)
export WALLTIME=$__default___h_rt
export WALL_SECS=$(echo $WALLTIME | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }' )

# set other env-vars
export PATH="$CONDAPATH:$PATH"
export RUNNERFILE="$CODEPATH/workflow/sge/run_snakemake.sge"
export RUN_NR=${RUN_NR:-1}
export PYTHONPATH="$CODEPATH:$PYTHONPATH"

# get the actual env-file and whatever else is in the select_env.env
export $(cat $MA_SELECT_ENV_FILE | xargs)

# activate env etc
source $CONDAPATH/activate derive_conceptualspaces
cd $CODEPATH
echo "This is run nr $RUN_NR"
echo "Snakemake-Args: $SNAKEMAKE_ARGS"
sleep 5 # give any previous instance time to die

###################### actual runner stuff ######################
snakemake --directory $MA_BASE_DIR $SNAKEMAKE_ARGS --unlock
timeout -k 30 $(( $WALL_SECS-60 )) snakemake --directory $MA_BASE_DIR -p $SNAKEMAKE_ARGS --profile $HOME/derive_conceptualspaces/workflow/sge/ikw_grid

###################### closing stuff ######################
# restarting if not finished
retval=$?
echo "Main process ended. Return-value is $retval"
if [ $retval -eq 124 ] || [ $retval -eq 137 ] ; then # if the timeout killed the program
  if (( $RUN_NR < 5 )); then # TODO calculate this from the walltime maybe?
    echo "COMMAND TO RUN: qsub -v RUN_NR=$((RUN_NR+1)) -v SNAKEMAKE_ARGS=$SNAKEMAKE_ARGS $RUNNERFILE"
    qsub -v RUN_NR=$((RUN_NR+1)) -v SNAKEMAKE_ARGS="$SNAKEMAKE_ARGS" $RUNNERFILE
    exit 0
  fi
fi

# sending a message IF you are finished
if [[ -z "${TELEGRAM_BOT_TOKEN}" ]] ; then
    (export $(cat $MA_ENV_FILE | xargs) && python $CODEPATH/misc_util/telegram_notifier.py "snakemake on $(hostname) ended")
fi
echo "snakemake on $(hostname) ended"
